### Playwright E2E 테스트 코드 생성 MCP 프롬프트

목표: 프로젝트의 E2E 테스트 스위트에 새로운 인증 관련 테스트 케이스를 추가합니다. 아래의 원칙과 형식을 엄격히 준수하여, 가독성 높고 유지보수하기 쉬운 테스트 코드를 생성해야 합니다.

핵심 원칙:

1.  기능별 파일 분리: 하나의 테스트 파일(`*.spec.ts`)은 하나의 주요 기능(예: 로그인, 회원가입)만 책임집니다.
2.  픽스처(Fixture) 활용: API 모킹(Mocking), 테스트 환경 설정 등 반복적인 준비 과정은 `*.fixture.ts` 파일로 분리하여 테스트 코드의 가독성을 높입니다.
3.  명확한 시나리오 설명: `test.describe`와 테스트 케이스 제목은 한글로 명확하게 작성하여, 코드를 읽지 않아도 테스트의 목적을 이해할 수 있도록 합니다.
4.  성공/실패 시나리오 분리: `test.describe` 블록을 사용해 '성공 시나리오'와 '실패 시나리오'를 명확히 그룹화합니다.
5.  단계별 행동 주석: 테스트 케이스 내부는 `// 1.`, `// 2.` 와 같은 번호가 새겨진 주석을 통해 각 단계의 행동을 서술합니다.

---

### 시나리오 작성 가이드

-   테스트 제목: `[성공/실패]: [조건], [기대 결과]` 형식을 반드시 따릅니다.
    -   (좋은 예) `성공: 올바른 이메일과 비밀번호 입력 시, 메인 페이지로 이동해야 한다`
    -   (나쁜 예) `로그인 테스트`
-   준비-실행-검증 패턴: 테스트 케이스 내부의 번호 주석은 이 패턴을 따릅니다.
    -   `// 1. ` 테스트 환경을 설정합니다. (`page.goto`)
    -   `// 2. ` 사용자의 행동을 수행합니다. (`.fill`, `.click`)
    -   `// 3. ` 행동의 결과를 단언합니다. (`expect`)
-   API 호출 검증: `isApiCalled` 변수를 통해 시나리오에 따라 API가 호출되었는지(`toBeTruthy`) 또는 호출되지 않았는지(`toBeFalsy`) 반드시 확인합니다.
-   픽스처 선택: 테스트하려는 시나리오에 가장 적합한 픽스처 함수(예: `[feature]SuccessTest`, `[feature]FailApiErrorTest`)를 선택하여 사용합니다.

---

### 예시 파일

-   spec.ts: spec_template.txt
-   fixture.ts: fixture_template.txt